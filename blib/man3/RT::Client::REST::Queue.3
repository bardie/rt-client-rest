.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RT::Client::REST::Queue 3"
.TH RT::Client::REST::Queue 3 "2007-12-23" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
RT::Client::REST::Queue \-\- queue object representation.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  my $rt = RT::Client::REST->new(server => $ENV{RTSERVER});
.Ve
.PP
.Vb 4
\&  my $queue = RT::Client::REST::Queue->new(
\&    rt  => $rt,
\&    id  => 'General',
\&  )->retrieve;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBRT::Client::REST::Queue\fR is based on RT::Client::REST::Object.
The representation allows to retrieve, edit, comment on, and create
queue in \s-1RT\s0.
.PP
Note: \s-1RT\s0 currently does not allow \s-1REST\s0 client to search queues.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.IP "\fBid\fR" 2
.IX Item "id"
For retrieval, you can specify either the numeric \s-1ID\s0 of the queue or its
name (case\-sensitive).  After the retrieval, however, this attribute will
be set to the numeric id.
.IP "\fBname\fR" 2
.IX Item "name"
This is the name of the queue.
.IP "\fBdescription\fR" 2
.IX Item "description"
Queue description.
.IP "\fBcorrespond_address\fR" 2
.IX Item "correspond_address"
Correspond address.
.IP "\fBcomment_address\fR" 2
.IX Item "comment_address"
Comment address.
.IP "\fBinitial_priority\fR" 2
.IX Item "initial_priority"
Initial priority.
.IP "\fBfinal_priority\fR" 2
.IX Item "final_priority"
Final priority.
.IP "\fBdefault_due_in\fR" 2
.IX Item "default_due_in"
Default due in.
.SH "DB METHODS"
.IX Header "DB METHODS"
For full explanation of these, please see \fB\*(L"\s-1DB\s0 \s-1METHODS\s0\*(R"\fR in
RT::Client::REST::Object documentation.
.IP "\fBretrieve\fR" 2
.IX Item "retrieve"
Retrieve queue from database.
.IP "\fBstore\fR" 2
.IX Item "store"
Create or update the queue.
.IP "\fBsearch\fR" 2
.IX Item "search"
Currently \s-1RT\s0 does not allow \s-1REST\s0 clients to search queues.
.SH "QUEUE-SPECIFIC METHODS"
.IX Header "QUEUE-SPECIFIC METHODS"
.IP "\fBtickets\fR" 2
.IX Item "tickets"
Get tickets that are in this queue (note: this may be a lot of tickets).
Note: tickets with status \*(L"deleted\*(R" will not be shown.
Object of type RT::Client::REST::SearchResult is returned which then
can be used to get to objects of type RT::Client::REST::Ticket.
.SH "INTERNAL METHODS"
.IX Header "INTERNAL METHODS"
.IP "\fBrt_type\fR" 2
.IX Item "rt_type"
Returns 'queue'.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
RT::Client::REST, RT::Client::REST::Object,
RT::Client::REST::SearchResult,
RT::Client::REST::Ticket.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dmitri Tikhonov <dtikhonov@yahoo.com>
.SH "LICENSE"
.IX Header "LICENSE"
Perl license with the exception of RT::Client::REST, which is GPLed.
